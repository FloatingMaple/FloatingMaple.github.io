<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maple&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-31T09:57:44.284Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Maple W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-NLP-Chapter2</title>
    <link href="http://yoursite.com/2019/03/31/Python-NLP-Chapter2/"/>
    <id>http://yoursite.com/2019/03/31/Python-NLP-Chapter2/</id>
    <published>2019-03-31T09:54:59.000Z</published>
    <updated>2019-03-31T09:57:44.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-2-NLP前置技术解析"><a href="#Chapter-2-NLP前置技术解析" class="headerlink" title="Chapter 2 NLP前置技术解析"></a>Chapter 2 NLP前置技术解析</h1><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul><li>选择Python作为NLP开发语言</li><li>安装与使用Anaconda</li><li>正则表达式</li><li>Numpy</li></ul><h2 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h2><ul><li><a href="https://docs.python.org/zh-cn/3.7/" target="_blank" rel="noopener">官方中文文档</a></li></ul><h2 id="正则表达式在NLP的基本应用"><a href="#正则表达式在NLP的基本应用" class="headerlink" title="正则表达式在NLP的基本应用"></a>正则表达式在NLP的基本应用</h2><p>作用：</p><p>​    将非结构化、半结构化文本转为结构化以方便后续的文本挖掘；去除“噪声”</p><h3 id="正则表达式中一些特殊符号可以处理常用逻辑"><a href="#正则表达式中一些特殊符号可以处理常用逻辑" class="headerlink" title="正则表达式中一些特殊符号可以处理常用逻辑"></a>正则表达式中一些特殊符号可以处理常用逻辑</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配任意一个字符<br>“.” 代替任何单个字符，换行除外</td></tr><tr><td>^</td><td>匹配<strong>开始</strong>的字符串</td></tr><tr><td>$</td><td>匹配<strong>结尾</strong>的字符串</td></tr><tr><td>[]</td><td>匹配多个字符串</td></tr></tbody></table><h3 id="匹配字符串"><a href="#匹配字符串" class="headerlink" title="匹配字符串"></a>匹配字符串</h3><p>在Python中使用re模块实现正则表达式。</p><p>通过使用 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**例 获取包含“爬虫”关键字的句子**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import re</span><br><span class="line">text_string = &apos;文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。&apos;</span><br><span class="line">regex = &apos;爬虫&apos;</span><br><span class="line">#以句号为分隔符通过split切分段落为句子</span><br><span class="line">p_string = text_string.split(&apos;。&apos;) </span><br><span class="line">for line in p_string:</span><br><span class="line">    if re.search(regex,line) is not None:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用一个爬虫抓取到网络中的信息</span><br><span class="line">根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分</span><br></pre></td></tr></table></figure><h4 id="例-匹配任意一个字符"><a href="#例-匹配任意一个字符" class="headerlink" title="例 匹配任意一个字符"></a>例 匹配任意一个字符</h4><table><thead><tr><th>正则表达式</th><th>可以匹配的例子</th><th>不能匹配的例子</th></tr></thead><tbody><tr><td>a.c</td><td>abc  ,  branch</td><td>add ,  crash</td></tr><tr><td>..t</td><td>bat  ,  oat</td><td>it  ,  table</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text_string = <span class="string">'文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'</span></span><br><span class="line"><span class="comment">#查找包含“爬”+任意一个字的句子</span></span><br><span class="line">regex = <span class="string">'爬.'</span></span><br><span class="line"><span class="comment">#以句号为分隔符通过split切分段落为句子</span></span><br><span class="line">p_string = text_string.split(<span class="string">'。'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> p_string:</span><br><span class="line">    <span class="keyword">if</span> re.search(regex,line) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">利用一个爬虫抓取到网络中的信息</span><br><span class="line">爬取的策略有广度爬取和深度爬取</span><br><span class="line">根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分</span><br></pre></td></tr></table></figure><h4 id="例-匹配起始和结尾字符串"><a href="#例-匹配起始和结尾字符串" class="headerlink" title="例 匹配起始和结尾字符串"></a>例 匹配起始和结尾字符串</h4><ul><li>“^a” 表示的是匹配所有以字母a<strong>开头</strong>的字符串</li><li>“a$” 表示的是所有以字母a<strong>结尾</strong>的字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text_string = <span class="string">'文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'</span></span><br><span class="line"><span class="comment">#查找以“文本”为起始的句子</span></span><br><span class="line">regex = <span class="string">'^文本'</span></span><br><span class="line"><span class="comment">#以句号为分隔符通过split切分段落为句子</span></span><br><span class="line">p_string = text_string.split(<span class="string">'。'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> p_string:</span><br><span class="line">    <span class="keyword">if</span> re.search(regex,line) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文本最重要的来源无疑是网络</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text_string = <span class="string">'文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'</span></span><br><span class="line"><span class="comment">#查找以“信息”为结尾的句子</span></span><br><span class="line">regex = <span class="string">'信息$'</span></span><br><span class="line"><span class="comment">#以句号为分隔符通过split切分段落为句子</span></span><br><span class="line">p_string = text_string.split(<span class="string">'。'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> p_string:</span><br><span class="line">    <span class="keyword">if</span> re.search(regex,line) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用一个爬虫抓取到网络中的信息</span><br></pre></td></tr></table></figure><h4 id="例-匹配多个字符"><a href="#例-匹配多个字符" class="headerlink" title="例 匹配多个字符"></a>例 匹配多个字符</h4><ul><li>[bcr]at代表的是匹配 bat 、cat 、 rat</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text_string = [<span class="string">'[重要的]今年第七号台风23日登录广州东部沿海地区'</span>,<span class="string">'上海发布车库销售管理通知：违规者暂停网签资格'</span>,<span class="string">'[紧要的]中国对印连发强硬信息，印度急切需要结束对峙'</span>]</span><br><span class="line"><span class="comment">#使用^表示起始</span></span><br><span class="line"><span class="comment">#存在“重要”或“紧要”，使用[]匹配多个字符</span></span><br><span class="line"><span class="comment">#以“..”代表之后的两个字符</span></span><br><span class="line">regex = <span class="string">'^\[[重紧]..\]'</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> text_string:</span><br><span class="line">    <span class="keyword">if</span> re.search(regex,line) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        print(line)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"not match"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[重要的]今年第七号台风23日登录广州东部沿海地区</span><br><span class="line">not match</span><br><span class="line">[紧要的]中国对印连发强硬信息，印度急切需要结束对峙</span><br></pre></td></tr></table></figure><h3 id="转义字符”-”匹配"><a href="#转义字符”-”匹配" class="headerlink" title="转义字符”\”匹配"></a>转义字符”\”匹配</h3><p>正则表达式中使用”\”作为转义字符，因此如果要匹配文本中的字符”\”,需要四个反斜杠<figure class="highlight plain"><figcaption><span>：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">前两个和后两个分别在编程语言里转义成反斜杠，然后再在正则表达式里转义成一个反斜杠</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import  re</span><br><span class="line">if re.search(&quot;\\\\&quot;,&quot;I have one nee\dle&quot;) is not None:</span><br><span class="line">    print(&quot;match it&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;not match&quot;)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match it</span><br></pre></td></tr></table></figure><p>Python中可以通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">````python</span><br><span class="line">import  re</span><br><span class="line">if re.search(r&quot;\\&quot;,&quot;I have one nee\dle&quot;) is not None:</span><br><span class="line">    print(&quot;match it&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;not match&quot;)</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">match it</span><br></pre></td></tr></table></figure><h3 id="抽取文本中的数字"><a href="#抽取文本中的数字" class="headerlink" title="抽取文本中的数字"></a>抽取文本中的数字</h3><ul><li><p>通过正则表达式匹配年份</p><p>[0-9]代表从0-9的所有数字，[a-z]代表从a到z的所有小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">strings = [&apos;War of 1812&apos;,&apos;There are 5280 feet to a mile&apos;,&apos;Happy New Year 2019!&apos;]</span><br><span class="line">#先声明year_strings为list变量，不然下面直接用会报错</span><br><span class="line">year_strings=[]</span><br><span class="line">for string in strings:</span><br><span class="line">    #匹配含有1000~2999数字的字符串</span><br><span class="line">    #[0-9]&#123;3&#125;表示重复[0-9]三次，相当于[0-9][0-9][0-9]</span><br><span class="line">    if re.search(&apos;[1-2][0-9]&#123;3&#125;&apos;,string):</span><br><span class="line">        year_strings.append(string)</span><br><span class="line">print(year_strings)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;War of 1812&apos;, &apos;Happy New Year 2019!&apos;]</span><br></pre></td></tr></table></figure></li><li><p>抽取所有的年份</p><p>使用re模块的另一个方法<code>findall()</code>来返回匹配带正则表达式的那部分字符串</p><p><code>re.findall(&quot;[a-z]&quot;,&#39;abc1234&#39;)</code>得到的结果是<code>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">years_string = <span class="string">'2016 was a good year,but 2017 will be better!'</span></span><br><span class="line"><span class="comment">#抽取所有2000~2999的年份</span></span><br><span class="line">years = re.findall(<span class="string">'[2][0-9]&#123;3&#125;'</span>,years_string)</span><br><span class="line">print(years)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'2016'</span>, <span class="string">'2017'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="Numpy使用详解"><a href="#Numpy使用详解" class="headerlink" title="Numpy使用详解"></a>Numpy使用详解</h2><p>Numpy(Numerical Python) 是高性能科学计算和数据分析的基础包，提供矩阵运算的功能。主要功能：</p><ul><li>ndarray  一个具有向量算术运算和复杂广播能力的多维数组对象</li><li>用于对数组数据进行快速运算的标准数学函数</li><li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具</li><li>非常有用的线性代数，傅里叶变换和随机数操作</li><li>用于集成C/C++ 和 Fortran 代码的工具</li></ul><p>也可以用作通用数据的高效多维容器，可以定义任意的数据类型。</p><p><strong>广播</strong> ： 当有两个维度不同的数组(array)运算的时候，可以用低维的数组复制成高维数组参与运算(Numpy运算时需要结构相同)</p><h3 id="创建Numpy数组"><a href="#创建Numpy数组" class="headerlink" title="创建Numpy数组"></a>创建Numpy数组</h3><p>在Numpy中，最核心的数据结构是 <strong>ndarray</strong> ，代表的是多维数组。</p><p>借用线性代数的说法，一维数组通常称为向量(vector)，二维数组通常称为矩阵(matrix)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#通过array可以将向量直接导入</span></span><br><span class="line">vector = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#通过array也可以将矩阵导入</span></span><br><span class="line">matrix = np.array([[<span class="number">1</span>,<span class="string">'Tim'</span>],[<span class="number">2</span>,<span class="string">'Joey'</span>],[<span class="number">3</span>,<span class="string">'Johnny'</span>],[<span class="number">4</span>,<span class="string">'Frank'</span>]])</span><br><span class="line">print(vector)</span><br><span class="line">print(matrix)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">[[<span class="string">'1'</span> <span class="string">'Tim'</span>]</span><br><span class="line"> [<span class="string">'2'</span> <span class="string">'Joey'</span>]</span><br><span class="line"> [<span class="string">'3'</span> <span class="string">'Johnny'</span>]</span><br><span class="line"> [<span class="string">'4'</span> <span class="string">'Frank'</span>]]</span><br></pre></td></tr></table></figure><h3 id="获取Numpy数组的维度"><a href="#获取Numpy数组的维度" class="headerlink" title="获取Numpy数组的维度"></a>获取Numpy数组的维度</h3><ul><li>通过<code>arange(n)</code> 方法生成0到n-1的数组</li><li>通过<code>reshape(row,column)</code>自动架构一个多行多列的array对象</li><li>通过<code>shape</code>属性获取Numpy数组的维度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.arange(<span class="number">12</span>)</span><br><span class="line">print(array)</span><br><span class="line"><span class="comment">#将array构造成三行4列的array对象</span></span><br><span class="line">matrix = array.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(matrix)</span><br><span class="line"><span class="comment">#shape返回一个元组tuple，第一个代表行，第二个代表列</span></span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="获取本地数据"><a href="#获取本地数据" class="headerlink" title="获取本地数据"></a>获取本地数据</h3><ul><li>通过<code>genfromtxt()</code>读取本地的数据集，<code>delimiter</code>参数定义数据由什么分割</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#genfromtxt默认comments为#，即数据中由#标注的数据将被注释掉</span></span><br><span class="line"><span class="comment">#由于我的数据文件中使用#开头作为表头，设定注释用字符为##</span></span><br><span class="line">nfl = np.genfromtxt(<span class="string">"D:/Code/Python-NLP-Code/source/price.csv"</span>,delimiter=<span class="string">"\t"</span>,comments=<span class="string">"##"</span>)</span><br><span class="line">print(nfl)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[[     nan      nan      nan      nan      nan      nan]</span><br><span class="line"> [<span class="number">1.00e+00</span> <span class="number">2.10e+03</span> <span class="number">3.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">2.00e+00</span> <span class="number">3.20e+03</span> <span class="number">4.00e+00</span> <span class="number">2.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">3.00e+00</span> <span class="number">2.20e+03</span> <span class="number">2.00e+00</span> <span class="number">2.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">4.00e+00</span> <span class="number">1.90e+03</span> <span class="number">4.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">5.00e+00</span> <span class="number">3.40e+03</span> <span class="number">5.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">6.00e+00</span> <span class="number">6.70e+03</span> <span class="number">3.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">7.00e+00</span> <span class="number">1.20e+03</span> <span class="number">2.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">8.00e+00</span> <span class="number">3.50e+03</span> <span class="number">4.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">9.00e+00</span> <span class="number">6.50e+03</span> <span class="number">1.00e+00</span> <span class="number">2.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.00e+01</span> <span class="number">9.80e+03</span> <span class="number">2.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.10e+01</span> <span class="number">7.80e+03</span> <span class="number">3.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.20e+01</span> <span class="number">6.70e+03</span> <span class="number">4.00e+00</span> <span class="number">3.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.30e+01</span> <span class="number">5.50e+03</span> <span class="number">6.00e+00</span> <span class="number">3.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.40e+01</span> <span class="number">6.60e+03</span> <span class="number">3.00e+00</span> <span class="number">1.00e+00</span>      nan      nan]</span><br><span class="line"> [<span class="number">1.50e+01</span> <span class="number">3.34e+03</span> <span class="number">2.00e+00</span> <span class="number">2.00e+00</span>      nan      nan]]</span><br></pre></td></tr></table></figure><p>自己手动编写的数据文件<code>price.csv</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">idprice#bedroom#bathroom#isBricklocal</span><br><span class="line">1210031tbos</span><br><span class="line">2320042rbos</span><br><span class="line">3220022tbos</span><br><span class="line">4190041tbos</span><br><span class="line">5340051tbos</span><br><span class="line">6670031tbos</span><br><span class="line">7120021rbos</span><br><span class="line">8350041rbos</span><br><span class="line">9650012rlink</span><br><span class="line">10980021tlink</span><br><span class="line">11780031rlink</span><br><span class="line">12670043rlink</span><br><span class="line">13550063tlink</span><br><span class="line">14660031tnew york</span><br><span class="line">15334022tnew york</span><br></pre></td></tr></table></figure><h3 id="正确读取数据"><a href="#正确读取数据" class="headerlink" title="正确读取数据"></a>正确读取数据</h3><ul><li><p><code>genfromtxt</code>函数默认其数据类型<code>dtype</code>为<code>float</code>，因此不是该种类型的数据会读出 nan(not a number) 数据类型转换出错 或 na(not available) 数值为空、不存在。</p></li><li><p>将<code>dtype</code>关键字设置为<code>&#39;U75&#39;</code>，即表示每个值都是75byte的unicode。</p></li><li><code>skip_header</code>关键字可以设置为整数，该参数可以跳过文件开头的对应的行数，然后再执行任何其他操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># genfromtxt默认comments为#，即数据中由#标注的数据将被注释掉</span></span><br><span class="line"><span class="comment"># dtype设置为U75,即每个值都是75byte的Unicode。</span></span><br><span class="line"><span class="comment"># skip_header设置为整数，意思是跳过文件开头的X行。</span></span><br><span class="line">nfl = np.genfromtxt(<span class="string">"D:/Code/Python-NLP-Code/source/price.csv"</span>,delimiter=<span class="string">"\t"</span>,comments=<span class="string">"##"</span>,dtype=<span class="string">'U75'</span>,skip_header=<span class="number">1</span>)</span><br><span class="line">print(nfl)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'id'</span> <span class="string">'price'</span> <span class="string">'#bedroom'</span> <span class="string">'#bathroom'</span> <span class="string">'#isBrick'</span> <span class="string">'local'</span>] <span class="comment">#添加skip_header=1后本行消失</span></span><br><span class="line"> [<span class="string">'1'</span> <span class="string">'2100'</span> <span class="string">'3'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'2'</span> <span class="string">'3200'</span> <span class="string">'4'</span> <span class="string">'2'</span> <span class="string">'r'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'3'</span> <span class="string">'2200'</span> <span class="string">'2'</span> <span class="string">'2'</span> <span class="string">'t'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'4'</span> <span class="string">'1900'</span> <span class="string">'4'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'5'</span> <span class="string">'3400'</span> <span class="string">'5'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'6'</span> <span class="string">'6700'</span> <span class="string">'3'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'7'</span> <span class="string">'1200'</span> <span class="string">'2'</span> <span class="string">'1'</span> <span class="string">'r'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'8'</span> <span class="string">'3500'</span> <span class="string">'4'</span> <span class="string">'1'</span> <span class="string">'r'</span> <span class="string">'bos'</span>]</span><br><span class="line"> [<span class="string">'9'</span> <span class="string">'6500'</span> <span class="string">'1'</span> <span class="string">'2'</span> <span class="string">'r'</span> <span class="string">'link'</span>]</span><br><span class="line"> [<span class="string">'10'</span> <span class="string">'9800'</span> <span class="string">'2'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'link'</span>]</span><br><span class="line"> [<span class="string">'11'</span> <span class="string">'7800'</span> <span class="string">'3'</span> <span class="string">'1'</span> <span class="string">'r'</span> <span class="string">'link'</span>]</span><br><span class="line"> [<span class="string">'12'</span> <span class="string">'6700'</span> <span class="string">'4'</span> <span class="string">'3'</span> <span class="string">'r'</span> <span class="string">'link'</span>]</span><br><span class="line"> [<span class="string">'13'</span> <span class="string">'5500'</span> <span class="string">'6'</span> <span class="string">'3'</span> <span class="string">'t'</span> <span class="string">'link'</span>]</span><br><span class="line"> [<span class="string">'14'</span> <span class="string">'6600'</span> <span class="string">'3'</span> <span class="string">'1'</span> <span class="string">'t'</span> <span class="string">'new york'</span>]</span><br><span class="line"> [<span class="string">'15'</span> <span class="string">'3340'</span> <span class="string">'2'</span> <span class="string">'2'</span> <span class="string">'t'</span> <span class="string">'new york'</span>]]</span><br></pre></td></tr></table></figure><h3 id="Numpy数组索引"><a href="#Numpy数组索引" class="headerlink" title="Numpy数组索引"></a>Numpy数组索引</h3><ul><li>Numpy支持list一样的定位操作</li><li>使用[x,y]来提取第x行，第y列的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">matrix = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]])</span><br><span class="line">print(matrix[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul><li>numpy支持list一样的切片操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#选择所有行且列的索引是1的数据</span></span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#选择所有行且列的索引是0和1的数据</span></span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#选择行的索引是1和2且所有列的数据</span></span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,:])</span><br><span class="line">print()</span><br><span class="line"><span class="comment">#选择行的所以是1和2且列的索引是0和1的数据</span></span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span> <span class="number">25</span> <span class="number">40</span>]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span> <span class="number">45</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span>]]</span><br></pre></td></tr></table></figure><h3 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h3><ul><li>numpy可以进行数组或矩阵的比较，比较之后会产生<code>boolean</code>值</li><li>允许使用条件符来拼接条件，<code>&amp;</code>代表<strong>且</strong>，<code>|</code>代表<strong>或</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#判断matrix矩阵中的每个值是否等于25</span></span><br><span class="line">m = (matrix == <span class="number">25</span>)</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]]</span><br></pre></td></tr></table></figure><p>较为复杂的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#matrix[:,1]选取所有行切索引为1的列的数据，然后判断是否等于25</span></span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line">print(second_column_25)</span><br><span class="line"><span class="comment">#展示返回true值的那一行数据</span></span><br><span class="line">print(matrix[second_column_25,:])</span><br><span class="line"><span class="comment">#更清晰的展示上面的作用，即选择True行的数据展示</span></span><br><span class="line">print(matrix[[<span class="literal">True</span>,<span class="literal">True</span>,<span class="literal">False</span>],:])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">False</span>  <span class="literal">True</span> <span class="literal">False</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">25</span> <span class="number">30</span>]]</span><br></pre></td></tr></table></figure><h3 id="替代值"><a href="#替代值" class="headerlink" title="替代值"></a>替代值</h3><ul><li>numpy可以运用布尔值来替换值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line"><span class="comment">#在数组中利用</span></span><br><span class="line"><span class="comment">#判断等于5或10，得到一个布尔值数组</span></span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line"><span class="comment">#利用布尔值数组将值替换为50</span></span><br><span class="line">vector[equal_to_ten_or_five] = <span class="number">50</span></span><br><span class="line">print(vector)</span><br><span class="line"><span class="comment">#在矩阵中利用</span></span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#将第二列中为25的值替换为10</span></span><br><span class="line">second_column_25 = matrix[:,<span class="number">1</span>] == <span class="number">25</span></span><br><span class="line">matrix[second_column_25,<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">print(matrix)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">50</span> <span class="number">50</span> <span class="number">15</span> <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br><span class="line"> [<span class="number">20</span> <span class="number">10</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">35</span> <span class="number">40</span> <span class="number">45</span>]]</span><br></pre></td></tr></table></figure><ul><li>利用替换处理<strong>空值</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="string">''</span>,<span class="string">'10'</span>,<span class="string">'15'</span>],</span><br><span class="line">    [<span class="string">'20'</span>,<span class="string">'25'</span>,<span class="string">'30'</span>],</span><br><span class="line">    [<span class="string">'35'</span>,<span class="string">'40'</span>,<span class="string">''</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#将第3列中的空值替换为'0'</span></span><br><span class="line">second_column_25 = (matrix[:,<span class="number">2</span>] == <span class="string">''</span>)</span><br><span class="line">matrix[second_column_25,<span class="number">2</span>] = <span class="string">'0'</span></span><br><span class="line">print(matrix)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">''</span> <span class="string">'10'</span> <span class="string">'15'</span>]</span><br><span class="line"> [<span class="string">'20'</span> <span class="string">'25'</span> <span class="string">'30'</span>]</span><br><span class="line"> [<span class="string">'35'</span> <span class="string">'40'</span> <span class="string">'0'</span>]]</span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>Numpy ndarray 数据类型可以通过参数 <code>dtype</code> 设定</li><li>可以使用 <code>astype</code> 转换类型，调用时会返回一个新的数组，也就是原始数据的一份复制</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">vector = np.array([<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>])</span><br><span class="line"><span class="comment">#从string转为float类</span></span><br><span class="line"><span class="comment">#如果含非数字类型，会报错</span></span><br><span class="line">vector = vector.astype(float)</span><br><span class="line">print(vector)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span>]</span><br></pre></td></tr></table></figure><h3 id="Numpy的统计计算方法"><a href="#Numpy的统计计算方法" class="headerlink" title="Numpy的统计计算方法"></a>Numpy的统计计算方法</h3><ul><li><code>sum()</code> 计算数组元素的和；</li><li><code>mean()</code> 计算数组元素的平均值</li><li><code>max()</code> 计算数组元素的最大值</li></ul><p>对矩阵计算结果为一个一维数组，需要指定行或列；注意数值类型必须是<code>int</code>或<code>float</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#数组例子</span></span><br><span class="line">vector = np.array([<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>])</span><br><span class="line">print(vector.sum())</span><br><span class="line"><span class="comment">#矩阵例子</span></span><br><span class="line">matrix = np.array([</span><br><span class="line">    [<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>],</span><br><span class="line">    [<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>],</span><br><span class="line">    [<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">#axis=1计算行的和</span></span><br><span class="line">print(matrix.sum(axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment">#axis=0计算列的和</span></span><br><span class="line">print(matrix.sum(axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br><span class="line"></span><br><span class="line">[ <span class="number">30</span>  <span class="number">60</span> <span class="number">120</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">60</span> <span class="number">60</span> <span class="number">90</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Chapter-2-NLP前置技术解析&quot;&gt;&lt;a href=&quot;#Chapter-2-NLP前置技术解析&quot; class=&quot;headerlink&quot; title=&quot;Chapter 2 NLP前置技术解析&quot;&gt;&lt;/a&gt;Chapter 2 NLP前置技术解析&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Python-NLP-Chapter1</title>
    <link href="http://yoursite.com/2019/03/31/Python-NLP-Chapter1/"/>
    <id>http://yoursite.com/2019/03/31/Python-NLP-Chapter1/</id>
    <published>2019-03-31T09:54:53.000Z</published>
    <updated>2019-03-31T09:56:58.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-NLP基础"><a href="#Chapter-1-NLP基础" class="headerlink" title="Chapter 1 NLP基础"></a>Chapter 1 NLP基础</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>NLP基础概念</li><li>NLP的发展与应用</li><li>NLP常用术语以及扩展介绍</li></ul><h2 id="NLP的概念"><a href="#NLP的概念" class="headerlink" title="NLP的概念"></a>NLP的概念</h2><p>NLP（Natural Language Processing ，自然语言处理），研究用计算机来 <em>处理、理解以及运用人类语言</em> ，达到人与计算机之间进行有效通讯。</p><h2 id="NLP的基本分类"><a href="#NLP的基本分类" class="headerlink" title="NLP的基本分类"></a>NLP的基本分类</h2><ul><li>自然语言理解<ul><li>音系学</li><li>词态学</li><li>句法学</li><li>语义句法学</li><li>语用学</li></ul></li><li>自然语言生成<ul><li>自然语言文本</li></ul></li></ul><h2 id="NLP的研究任务"><a href="#NLP的研究任务" class="headerlink" title="NLP的研究任务"></a>NLP的研究任务</h2><ul><li><p>机器翻译</p><p>计算机具备将一种语言翻译成另一种语言的能力</p></li><li><p>情感分析</p><p>计算机能够判断用户评论是否积极</p></li><li><p>智能问答</p><p>计算机能够正确回答输入的问题</p></li><li><p>文摘生成</p><p>计算机能够准确归纳、总结并产生文本摘要</p></li><li><p>文本分类</p><p>计算机能够菜鸡各种文章，进行主题分析，进而进行自动分类</p></li><li><p>舆论分析</p><p>计算机能够判断目前舆论的导向</p></li><li><p>知识图谱</p><p>知识点相互连接而成的语义网络</p></li></ul><h2 id="NLP相关知识构成"><a href="#NLP相关知识构成" class="headerlink" title="NLP相关知识构成"></a>NLP相关知识构成</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ol><li><p>分词 segment</p><p>词是<strong>最小的</strong>能够<strong>独立活动</strong>的<strong>有意义的</strong>语言成分，中文分词问题比较重要</p><p><strong>常用手段</strong>：基于字典的最长串匹配</p><p>问题：歧义分词</p></li><li><p>词性标注 part-of-speech tagging</p><p>词性一般指动词、名词、形容词等。</p><p>目的：表征词的一种<strong>隐藏状态</strong>，隐藏状态构成的转移就构成了<strong>状态转移序列</strong></p></li><li><p>命名实体识别 NER Named Entity Recognition</p><p>从文本中识别具有<strong>特定类别</strong>的实体，通常是名词</p></li><li><p>句法分析 syntax parsing</p><p>往往是一种<strong>基于规则</strong>的专家系统</p></li><li><p>指代消解 anaphora resolution</p><p>中文中代词出现的频率很高，指代消解即是辨明代词所代表的意思</p></li><li><p>情感识别 emotion recognition</p><p>本质上是<strong>分类问题</strong>，一般分为正面、负面，或加上中性。</p><p>方法：词袋模型+分类器、词向量模型+RNN等</p></li><li><p>纠错 correction</p><p>自动纠错多应用在搜索技术及输入法中</p><p>方法：基于N-Gram进行纠错、通过字典树、有限状态机</p></li><li><p>问答系统 QA system</p><p>较为复杂，需要语音识别、合成，自然语言理解、知识图谱等多项技术配合</p></li></ol><h3 id="知识结构"><a href="#知识结构" class="headerlink" title="知识结构"></a>知识结构</h3><ul><li><p>句法语义分析</p><p>针对目标句子，进行各种句法分析，如分词、词性标记、命名实体识别、链接，句法分析、语义角色识别、多义词消歧等</p></li><li><p>关键词抽取</p><p>抽取目标文本中的主要信息，如从一条新闻中抽取。</p><p>涉及实体识别、时间抽取、因果关系抽取等</p></li><li><p>文本挖掘</p><p>对文本的聚类、分类、信息抽取、摘要、情感分析以及对挖掘信息和知识的可视化、交互式的呈现界面</p></li><li><p>机器翻译</p><p>可分为文本翻译、语音翻译、手语翻译、图形翻译等</p></li><li><p>信息检索</p><p>对大规模的文档进行索引。</p></li><li><p>问答系统</p><p>对自然语言查询语句进行语义分析，包括实体链接、关系识别，形成逻辑表达式，然后到知识库中查找可能的候选答案并根据排序机制找出最佳答案</p></li><li><p>对话系统</p></li></ul><h2 id="语料库-中文"><a href="#语料库-中文" class="headerlink" title="语料库(中文)"></a>语料库(中文)</h2><ul><li><p><a href="https://dumps.wikimedia.org/zhwiki/" target="_blank" rel="noopener">中文维基百科</a></p></li><li><p><a href="http://download.labs./sougou.com/resource/ca.php" target="_blank" rel="noopener">搜狗新闻语料库</a></p><p>提供URL和正文信息</p></li><li><p><a href="https://www.kaggle.com/tmdb/tmdb-movie-metadata" target="_blank" rel="noopener">IMDB情感分析语料库</a></p><p>包括影片的众多信息、演员、片长、内容介绍、分级、评论等</p></li></ul><h2 id="探讨NLP的几个层面"><a href="#探讨NLP的几个层面" class="headerlink" title="探讨NLP的几个层面"></a>探讨NLP的几个层面</h2><ol><li><p>词法分析</p><p>分词、词性标注</p></li><li><p>句法分析</p></li><li><p>语义分析</p><p>语义角色标注(semantic role labeling)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Chapter-1-NLP基础&quot;&gt;&lt;a href=&quot;#Chapter-1-NLP基础&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1 NLP基础&quot;&gt;&lt;/a&gt;Chapter 1 NLP基础&lt;/h1&gt;&lt;h2 id=&quot;List&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Python-NLP-Abstract</title>
    <link href="http://yoursite.com/2019/03/31/Python-NLP-Abstract/"/>
    <id>http://yoursite.com/2019/03/31/Python-NLP-Abstract/</id>
    <published>2019-03-31T09:54:18.000Z</published>
    <updated>2019-03-31T09:59:06.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Abstract-内容简介"><a href="#Abstract-内容简介" class="headerlink" title="Abstract 内容简介"></a>Abstract 内容简介</h1><hr><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>介绍NLP所需要了解的Python科学包、正则表达式、Solr检索</p><h3 id="Section-1"><a href="#Section-1" class="headerlink" title="Section 1"></a>Section 1</h3><h3 id="Section-2"><a href="#Section-2" class="headerlink" title="Section 2"></a>Section 2</h3><h3 id="Section-11"><a href="#Section-11" class="headerlink" title="Section 11"></a>Section 11</h3><hr><h2 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h2><p>介绍NLP相关的各个知识点</p><h3 id="Section3-5"><a href="#Section3-5" class="headerlink" title="Section3~5"></a>Section3~5</h3><p><em>词法分析</em> 层面的一些技术，是NLP技术的基础</p><h3 id="Section6"><a href="#Section6" class="headerlink" title="Section6"></a>Section6</h3><p><em>句法分析</em> 技术</p><h3 id="Section7"><a href="#Section7" class="headerlink" title="Section7"></a>Section7</h3><p>常用的 <em>向量化</em> 方法，常用于各种NLP任务的输入</p><h3 id="Section8"><a href="#Section8" class="headerlink" title="Section8"></a>Section8</h3><p><em>情感分析</em> 相关概念、场景以及一般做情感分析的流程</p><h3 id="Section9"><a href="#Section9" class="headerlink" title="Section9"></a>Section9</h3><p><em>机器学习</em> 的一些基本概念，重点突出NLP常用的 <em>分类算法</em> 、<em>聚类算法</em> </p><h3 id="Section10"><a href="#Section10" class="headerlink" title="Section10"></a>Section10</h3><p>介绍NLP中常用的 <em>深度学习算法</em>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Abstract-内容简介&quot;&gt;&lt;a href=&quot;#Abstract-内容简介&quot; class=&quot;headerlink&quot; title=&quot;Abstract 内容简介&quot;&gt;&lt;/a&gt;Abstract 内容简介&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Part-1&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>AHU HPC培训</title>
    <link href="http://yoursite.com/2019/03/25/AHU%20HPC%E5%9F%B9%E8%AE%AD/"/>
    <id>http://yoursite.com/2019/03/25/AHU HPC培训/</id>
    <published>2019-03-25T09:00:10.000Z</published>
    <updated>2019-03-28T08:44:23.873Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>域名<br>hpcc.ahu.edu.cn</li><li>配置情况</li></ul><table><thead><tr><th>CPU</th><th>26</th><th>*</th></tr></thead><tbody><tr><td>gpu1</td><td>1</td><td>*</td></tr><tr><td>gpu2</td><td>1</td><td>2卡</td></tr><tr><td>gpu8</td><td>3</td><td>8卡</td></tr></tbody></table><h4 id="Linux下操作命令"><a href="#Linux下操作命令" class="headerlink" title="Linux下操作命令"></a>Linux下操作命令</h4><ul><li><p>登录到结点</p><ul><li>ssh [gpu01]</li></ul></li><li><p>登陆后查看</p><ul><li>top </li><li>free </li></ul></li><li><p>查看历史命令</p><ul><li>.bash_history</li></ul></li><li><p>环境变量</p><ul><li>.bashrc</li><li>.bash_profile</li></ul></li><li><p>常用环境变量</p><ul><li><p>设置可执行程序的查找路径<br>  export PATH=/:$PATH</p><p>  e.g. export PATH=/Share/apps/matlab//R2016a/bin:$PATH<br>  # 直接在窗口输入时只在当前窗口有效<br>  # 可以写入到 ~/.bashrc文件中<br>  # 或写入到自定义.sh文件中，然后通过source加载</p></li></ul></li></ul><h4 id="slurm作业管理器"><a href="#slurm作业管理器" class="headerlink" title="slurm作业管理器"></a>slurm作业管理器</h4><ul><li>sinfo查看当前各节点资源<ul><li>timelimit 时间限制</li><li>State 状态<ul><li>mix 有人用但是没有满</li><li>alloc 被占满</li><li>idle 空闲</li></ul></li></ul></li><li>squeue查看任务队列<ul><li>-u 账号名</li></ul></li><li>srun交互式提交<ul><li>-p 节点名</li><li>-N 节点数</li><li>-n 核心数</li><li>-c 指定每个进程使用的cpu核数</li><li>-gres=gpu:1 指定使用GPU卡 ※必须</li><li>程序命令</li></ul></li><li>sbatch后台提交作业<ul><li>shell脚本<ul><li>固定格式<br>#!/bin/bash</li></ul></li><li>参数同srun</li></ul></li><li>默认输出<ul><li>slurm-作业号.out文件</li></ul></li><li>scancel取消作业<ul><li>参数：作业号</li><li>-u 用户名</li><li>-n 作业名NAME</li></ul></li><li>scontrol show job查看正在运行的作业信息<ul><li>参数：作业号</li></ul></li><li>sacct查看历史任务信息<ul><li>-u 用户名</li></ul></li><li>salloc申请结点资源</li></ul><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h4><ul><li>安大集群软件<ul><li>/Share/apps</li></ul></li><li>常见问题<ul><li>节点、核数不匹配</li><li>缺库 .so.x </li></ul></li></ul><h4 id="提交AI作业"><a href="#提交AI作业" class="headerlink" title="提交AI作业"></a>提交AI作业</h4><ul><li>容器Singularity<ul><li>主程序路径<ul><li>/Share/apps/singularity/bin/singularity</li></ul></li><li>镜像文件<ul><li>/Share/imgs/ahu_ai.img</li></ul></li><li>GPU型号<ul><li>V100,显存16G，共28张卡</li></ul></li></ul></li><li>实例<ul><li>PyTorch脚本<ul><li>#SBATCH –job-name=pytorch    作业名称</li><li>#SBATCH -N 1    节点数</li><li>#SBATCH –gres=gpu:1      GPU卡数 :star:</li><li>#SBATCH -mem=20G     内存大小</li><li>#SBATCH -p GPU8     队列名（分区）</li></ul></li><li>查看GPU使用情况<ul><li>nvidia-smi</li></ul></li><li>Tensorflow使用<ul><li>安装位置<ul><li>/usr/local/lib/python3.6/dist-packages/tensorlfow</li></ul></li><li>脚本<ul><li>类似PyTorch</li></ul></li></ul></li><li>安装软件<ul><li>./install</li><li>configure  -&gt;  make  -&gt;  make install</li><li>cmake  -&gt;  ccmake  -&gt;  make  –&gt;  make install </li><li>pip install </li><li>容器安装</li><li>没有root权限但是有安装常用软件的权限 :star:</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;域名&lt;br&gt;hpcc.ahu.edu.cn&lt;/li&gt;
&lt;li&gt;配置情况&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/25/hello-world/"/>
    <id>http://yoursite.com/2019/03/25/hello-world/</id>
    <published>2019-03-25T08:41:51.318Z</published>
    <updated>2019-03-25T08:41:51.318Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
