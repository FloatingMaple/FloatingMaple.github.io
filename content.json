{"meta":{"title":"Maple's Blog","subtitle":null,"description":"A blog of Maple W","author":"Maple W","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-03-30T06:42:44.000Z","updated":"2019-03-30T06:42:44.258Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Python-NLP-Chapter2","slug":"Python-NLP-Chapter2","date":"2019-03-31T09:54:59.000Z","updated":"2019-03-31T09:57:44.284Z","comments":true,"path":"2019/03/31/Python-NLP-Chapter2/","link":"","permalink":"http://yoursite.com/2019/03/31/Python-NLP-Chapter2/","excerpt":"","text":"Chapter 2 NLP前置技术解析list 选择Python作为NLP开发语言 安装与使用Anaconda 正则表达式 Numpy Python语言 官方中文文档 正则表达式在NLP的基本应用作用： ​ 将非结构化、半结构化文本转为结构化以方便后续的文本挖掘；去除“噪声” 正则表达式中一些特殊符号可以处理常用逻辑 符号 含义 . 匹配任意一个字符“.” 代替任何单个字符，换行除外 ^ 匹配开始的字符串 $ 匹配结尾的字符串 [] 匹配多个字符串 匹配字符串在Python中使用re模块实现正则表达式。 通过使用 123456789101112**例 获取包含“爬虫”关键字的句子**```pythonimport retext_string = &apos;文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。&apos;regex = &apos;爬虫&apos;#以句号为分隔符通过split切分段落为句子p_string = text_string.split(&apos;。&apos;) for line in p_string: if re.search(regex,line) is not None: print(line) 输出结果： 12利用一个爬虫抓取到网络中的信息根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分 例 匹配任意一个字符 正则表达式 可以匹配的例子 不能匹配的例子 a.c abc , branch add , crash ..t bat , oat it , table 123456789import retext_string = '文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'#查找包含“爬”+任意一个字的句子regex = '爬.'#以句号为分隔符通过split切分段落为句子p_string = text_string.split('。')for line in p_string: if re.search(regex,line) is not None: print(line) 输出结果： 123利用一个爬虫抓取到网络中的信息爬取的策略有广度爬取和深度爬取根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分 例 匹配起始和结尾字符串 “^a” 表示的是匹配所有以字母a开头的字符串 “a$” 表示的是所有以字母a结尾的字符串 123456789import retext_string = '文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'#查找以“文本”为起始的句子regex = '^文本'#以句号为分隔符通过split切分段落为句子p_string = text_string.split('。')for line in p_string: if re.search(regex,line) is not None: print(line) 输出结果： 1文本最重要的来源无疑是网络 123456789import retext_string = '文本最重要的来源无疑是网络。我们要把网络中的文本获取形成一个文本数据库。利用一个爬虫抓取到网络中的信息。爬取的策略有广度爬取和深度爬取。根据用户的需求，爬虫可以有主题爬虫和通用爬虫之分。'#查找以“信息”为结尾的句子regex = '信息$'#以句号为分隔符通过split切分段落为句子p_string = text_string.split('。')for line in p_string: if re.search(regex,line) is not None: print(line) 输出结果： 1利用一个爬虫抓取到网络中的信息 例 匹配多个字符 [bcr]at代表的是匹配 bat 、cat 、 rat 1234567891011import retext_string = ['[重要的]今年第七号台风23日登录广州东部沿海地区','上海发布车库销售管理通知：违规者暂停网签资格','[紧要的]中国对印连发强硬信息，印度急切需要结束对峙']#使用^表示起始#存在“重要”或“紧要”，使用[]匹配多个字符#以“..”代表之后的两个字符regex = '^\\[[重紧]..\\]'for line in text_string: if re.search(regex,line) is not None: print(line) else: print(\"not match\") 输出结果： 123[重要的]今年第七号台风23日登录广州东部沿海地区not match[紧要的]中国对印连发强硬信息，印度急切需要结束对峙 转义字符”\\”匹配正则表达式中使用”\\”作为转义字符，因此如果要匹配文本中的字符”\\”,需要四个反斜杠：123456789前两个和后两个分别在编程语言里转义成反斜杠，然后再在正则表达式里转义成一个反斜杠```pythonimport reif re.search(&quot;\\\\\\\\&quot;,&quot;I have one nee\\dle&quot;) is not None: print(&quot;match it&quot;)else: print(&quot;not match&quot;) 输出结果： 1match it Python中可以通过12345678````pythonimport reif re.search(r&quot;\\\\&quot;,&quot;I have one nee\\dle&quot;) is not None: print(&quot;match it&quot;)else: print(&quot;not match&quot;)` 输出结果： 1match it 抽取文本中的数字 通过正则表达式匹配年份 [0-9]代表从0-9的所有数字，[a-z]代表从a到z的所有小写字母 12345678910import restrings = [&apos;War of 1812&apos;,&apos;There are 5280 feet to a mile&apos;,&apos;Happy New Year 2019!&apos;]#先声明year_strings为list变量，不然下面直接用会报错year_strings=[]for string in strings: #匹配含有1000~2999数字的字符串 #[0-9]&#123;3&#125;表示重复[0-9]三次，相当于[0-9][0-9][0-9] if re.search(&apos;[1-2][0-9]&#123;3&#125;&apos;,string): year_strings.append(string)print(year_strings) 输出结果： 1[&apos;War of 1812&apos;, &apos;Happy New Year 2019!&apos;] 抽取所有的年份 使用re模块的另一个方法findall()来返回匹配带正则表达式的那部分字符串 re.findall(&quot;[a-z]&quot;,&#39;abc1234&#39;)得到的结果是[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] 12345import reyears_string = '2016 was a good year,but 2017 will be better!'#抽取所有2000~2999的年份years = re.findall('[2][0-9]&#123;3&#125;',years_string)print(years) 输出结果: 1['2016', '2017'] Numpy使用详解Numpy(Numerical Python) 是高性能科学计算和数据分析的基础包，提供矩阵运算的功能。主要功能： ndarray 一个具有向量算术运算和复杂广播能力的多维数组对象 用于对数组数据进行快速运算的标准数学函数 用于读写磁盘数据的工具以及用于操作内存映射文件的工具 非常有用的线性代数，傅里叶变换和随机数操作 用于集成C/C++ 和 Fortran 代码的工具 也可以用作通用数据的高效多维容器，可以定义任意的数据类型。 广播 ： 当有两个维度不同的数组(array)运算的时候，可以用低维的数组复制成高维数组参与运算(Numpy运算时需要结构相同) 创建Numpy数组在Numpy中，最核心的数据结构是 ndarray ，代表的是多维数组。 借用线性代数的说法，一维数组通常称为向量(vector)，二维数组通常称为矩阵(matrix) 1234567import numpy as np#通过array可以将向量直接导入vector = np.array([1,2,3,4])#通过array也可以将矩阵导入matrix = np.array([[1,'Tim'],[2,'Joey'],[3,'Johnny'],[4,'Frank']])print(vector)print(matrix) 输出结果： 12345[1 2 3 4][['1' 'Tim'] ['2' 'Joey'] ['3' 'Johnny'] ['4' 'Frank']] 获取Numpy数组的维度 通过arange(n) 方法生成0到n-1的数组 通过reshape(row,column)自动架构一个多行多列的array对象 通过shape属性获取Numpy数组的维度 12345678import numpy as nparray = np.arange(12)print(array)#将array构造成三行4列的array对象matrix = array.reshape(3,4)print(matrix)#shape返回一个元组tuple，第一个代表行，第二个代表列print(matrix.shape) 输出结果： 12345[ 0 1 2 3 4 5 6 7 8 9 10 11][[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11]](3, 4) 获取本地数据 通过genfromtxt()读取本地的数据集，delimiter参数定义数据由什么分割 12345import numpy as np#genfromtxt默认comments为#，即数据中由#标注的数据将被注释掉#由于我的数据文件中使用#开头作为表头，设定注释用字符为##nfl = np.genfromtxt(\"D:/Code/Python-NLP-Code/source/price.csv\",delimiter=\"\\t\",comments=\"##\")print(nfl) 输出结果： 12345678910111213141516[[ nan nan nan nan nan nan] [1.00e+00 2.10e+03 3.00e+00 1.00e+00 nan nan] [2.00e+00 3.20e+03 4.00e+00 2.00e+00 nan nan] [3.00e+00 2.20e+03 2.00e+00 2.00e+00 nan nan] [4.00e+00 1.90e+03 4.00e+00 1.00e+00 nan nan] [5.00e+00 3.40e+03 5.00e+00 1.00e+00 nan nan] [6.00e+00 6.70e+03 3.00e+00 1.00e+00 nan nan] [7.00e+00 1.20e+03 2.00e+00 1.00e+00 nan nan] [8.00e+00 3.50e+03 4.00e+00 1.00e+00 nan nan] [9.00e+00 6.50e+03 1.00e+00 2.00e+00 nan nan] [1.00e+01 9.80e+03 2.00e+00 1.00e+00 nan nan] [1.10e+01 7.80e+03 3.00e+00 1.00e+00 nan nan] [1.20e+01 6.70e+03 4.00e+00 3.00e+00 nan nan] [1.30e+01 5.50e+03 6.00e+00 3.00e+00 nan nan] [1.40e+01 6.60e+03 3.00e+00 1.00e+00 nan nan] [1.50e+01 3.34e+03 2.00e+00 2.00e+00 nan nan]] 自己手动编写的数据文件price.csv： 12345678910111213141516id price #bedroom #bathroom #isBrick local1 2100 3 1 t bos2 3200 4 2 r bos3 2200 2 2 t bos4 1900 4 1 t bos5 3400 5 1 t bos6 6700 3 1 t bos7 1200 2 1 r bos8 3500 4 1 r bos9 6500 1 2 r link10 9800 2 1 t link11 7800 3 1 r link12 6700 4 3 r link13 5500 6 3 t link14 6600 3 1 t new york15 3340 2 2 t new york 正确读取数据 genfromtxt函数默认其数据类型dtype为float，因此不是该种类型的数据会读出 nan(not a number) 数据类型转换出错 或 na(not available) 数值为空、不存在。 将dtype关键字设置为&#39;U75&#39;，即表示每个值都是75byte的unicode。 skip_header关键字可以设置为整数，该参数可以跳过文件开头的对应的行数，然后再执行任何其他操作 123456import numpy as np# genfromtxt默认comments为#，即数据中由#标注的数据将被注释掉# dtype设置为U75,即每个值都是75byte的Unicode。# skip_header设置为整数，意思是跳过文件开头的X行。nfl = np.genfromtxt(\"D:/Code/Python-NLP-Code/source/price.csv\",delimiter=\"\\t\",comments=\"##\",dtype='U75',skip_header=1)print(nfl) 输出结果： 12345678910111213141516[['id' 'price' '#bedroom' '#bathroom' '#isBrick' 'local'] #添加skip_header=1后本行消失 ['1' '2100' '3' '1' 't' 'bos'] ['2' '3200' '4' '2' 'r' 'bos'] ['3' '2200' '2' '2' 't' 'bos'] ['4' '1900' '4' '1' 't' 'bos'] ['5' '3400' '5' '1' 't' 'bos'] ['6' '6700' '3' '1' 't' 'bos'] ['7' '1200' '2' '1' 'r' 'bos'] ['8' '3500' '4' '1' 'r' 'bos'] ['9' '6500' '1' '2' 'r' 'link'] ['10' '9800' '2' '1' 't' 'link'] ['11' '7800' '3' '1' 'r' 'link'] ['12' '6700' '4' '3' 'r' 'link'] ['13' '5500' '6' '3' 't' 'link'] ['14' '6600' '3' '1' 't' 'new york'] ['15' '3340' '2' '2' 't' 'new york']] Numpy数组索引 Numpy支持list一样的定位操作 使用[x,y]来提取第x行，第y列的数据 123import numpy as npmatrix = np.array([[1,2,3],[20,30,40]])print(matrix[0,1]) 输出结果： 12 切片 numpy支持list一样的切片操作 1234567891011121314151617import numpy as npmatrix = np.array([ [5,10,15], [20,25,30], [35,40,45]])#选择所有行且列的索引是1的数据print(matrix[:,1])print()#选择所有行且列的索引是0和1的数据print(matrix[:,0:2])print()#选择行的索引是1和2且所有列的数据print(matrix[1:3,:])print()#选择行的所以是1和2且列的索引是0和1的数据print(matrix[1:3,0:2]) 输出结果： 1234567891011[10 25 40][[ 5 10] [20 25] [35 40]][[20 25 30] [35 40 45]][[20 25] [35 40]] 数组比较 numpy可以进行数组或矩阵的比较，比较之后会产生boolean值 允许使用条件符来拼接条件，&amp;代表且，|代表或 123456789import numpy as npmatrix = np.array([ [5,10,15], [20,25,30], [35,40,45]])#判断matrix矩阵中的每个值是否等于25m = (matrix == 25)print(m) 输出结果： 123[[False False False] [False True False] [False False False]] 较为复杂的一个例子： 12345678910111213import numpy as npmatrix = np.array([ [5,10,15], [20,25,30], [35,40,45]])#matrix[:,1]选取所有行切索引为1的列的数据，然后判断是否等于25second_column_25 = (matrix[:,1] == 25)print(second_column_25)#展示返回true值的那一行数据print(matrix[second_column_25,:])#更清晰的展示上面的作用，即选择True行的数据展示print(matrix[[True,True,False],:]) 输出结果： 123456[False True False][[20 25 30]][[ 5 10 15] [20 25 30]] 替代值 numpy可以运用布尔值来替换值 123456789101112131415161718import numpy as npvector = np.array([5,10,15,20])#在数组中利用#判断等于5或10，得到一个布尔值数组equal_to_ten_or_five = (vector == 10) | (vector == 5)#利用布尔值数组将值替换为50vector[equal_to_ten_or_five] = 50print(vector)#在矩阵中利用matrix = np.array([ [5,10,15], [20,25,30], [35,40,45]])#将第二列中为25的值替换为10second_column_25 = matrix[:,1] == 25matrix[second_column_25,1] = 10print(matrix) 输出结果： 12345[50 50 15 20][[ 5 10 15] [20 10 30] [35 40 45]] 利用替换处理空值 12345678910import numpy as npmatrix = np.array([ ['','10','15'], ['20','25','30'], ['35','40','']])#将第3列中的空值替换为'0'second_column_25 = (matrix[:,2] == '')matrix[second_column_25,2] = '0'print(matrix) 输出结果： 123[['' '10' '15'] ['20' '25' '30'] ['35' '40' '0']] 数据类型转换 Numpy ndarray 数据类型可以通过参数 dtype 设定 可以使用 astype 转换类型，调用时会返回一个新的数组，也就是原始数据的一份复制 123456import numpy as npvector = np.array([\"1\",\"2\",\"3\"])#从string转为float类#如果含非数字类型，会报错vector = vector.astype(float)print(vector) 输出结果： 1[1. 2. 3.] Numpy的统计计算方法 sum() 计算数组元素的和； mean() 计算数组元素的平均值 max() 计算数组元素的最大值 对矩阵计算结果为一个一维数组，需要指定行或列；注意数值类型必须是int或float 1234567891011121314import numpy as np#数组例子vector = np.array([5,10,15,20])print(vector.sum())#矩阵例子matrix = np.array([ [5,10,15], [20,10,30], [35,40,45]])#axis=1计算行的和print(matrix.sum(axis=1))#axis=0计算列的和print(matrix.sum(axis=0)) 输出结果： 1234550[ 30 60 120][60 60 90]","categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://yoursite.com/tags/NLP/"},{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Numpy","slug":"Numpy","permalink":"http://yoursite.com/tags/Numpy/"}]},{"title":"Python-NLP-Chapter1","slug":"Python-NLP-Chapter1","date":"2019-03-31T09:54:53.000Z","updated":"2019-03-31T09:56:58.985Z","comments":true,"path":"2019/03/31/Python-NLP-Chapter1/","link":"","permalink":"http://yoursite.com/2019/03/31/Python-NLP-Chapter1/","excerpt":"","text":"Chapter 1 NLP基础List NLP基础概念 NLP的发展与应用 NLP常用术语以及扩展介绍 NLP的概念NLP（Natural Language Processing ，自然语言处理），研究用计算机来 处理、理解以及运用人类语言 ，达到人与计算机之间进行有效通讯。 NLP的基本分类 自然语言理解 音系学 词态学 句法学 语义句法学 语用学 自然语言生成 自然语言文本 NLP的研究任务 机器翻译 计算机具备将一种语言翻译成另一种语言的能力 情感分析 计算机能够判断用户评论是否积极 智能问答 计算机能够正确回答输入的问题 文摘生成 计算机能够准确归纳、总结并产生文本摘要 文本分类 计算机能够菜鸡各种文章，进行主题分析，进而进行自动分类 舆论分析 计算机能够判断目前舆论的导向 知识图谱 知识点相互连接而成的语义网络 NLP相关知识构成基本术语 分词 segment 词是最小的能够独立活动的有意义的语言成分，中文分词问题比较重要 常用手段：基于字典的最长串匹配 问题：歧义分词 词性标注 part-of-speech tagging 词性一般指动词、名词、形容词等。 目的：表征词的一种隐藏状态，隐藏状态构成的转移就构成了状态转移序列 命名实体识别 NER Named Entity Recognition 从文本中识别具有特定类别的实体，通常是名词 句法分析 syntax parsing 往往是一种基于规则的专家系统 指代消解 anaphora resolution 中文中代词出现的频率很高，指代消解即是辨明代词所代表的意思 情感识别 emotion recognition 本质上是分类问题，一般分为正面、负面，或加上中性。 方法：词袋模型+分类器、词向量模型+RNN等 纠错 correction 自动纠错多应用在搜索技术及输入法中 方法：基于N-Gram进行纠错、通过字典树、有限状态机 问答系统 QA system 较为复杂，需要语音识别、合成，自然语言理解、知识图谱等多项技术配合 知识结构 句法语义分析 针对目标句子，进行各种句法分析，如分词、词性标记、命名实体识别、链接，句法分析、语义角色识别、多义词消歧等 关键词抽取 抽取目标文本中的主要信息，如从一条新闻中抽取。 涉及实体识别、时间抽取、因果关系抽取等 文本挖掘 对文本的聚类、分类、信息抽取、摘要、情感分析以及对挖掘信息和知识的可视化、交互式的呈现界面 机器翻译 可分为文本翻译、语音翻译、手语翻译、图形翻译等 信息检索 对大规模的文档进行索引。 问答系统 对自然语言查询语句进行语义分析，包括实体链接、关系识别，形成逻辑表达式，然后到知识库中查找可能的候选答案并根据排序机制找出最佳答案 对话系统 语料库(中文) 中文维基百科 搜狗新闻语料库 提供URL和正文信息 IMDB情感分析语料库 包括影片的众多信息、演员、片长、内容介绍、分级、评论等 探讨NLP的几个层面 词法分析 分词、词性标注 句法分析 语义分析 语义角色标注(semantic role labeling)","categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://yoursite.com/tags/NLP/"}]},{"title":"Python-NLP-Abstract","slug":"Python-NLP-Abstract","date":"2019-03-31T09:54:18.000Z","updated":"2019-03-31T09:59:06.098Z","comments":true,"path":"2019/03/31/Python-NLP-Abstract/","link":"","permalink":"http://yoursite.com/2019/03/31/Python-NLP-Abstract/","excerpt":"","text":"Abstract 内容简介 Part 1介绍NLP所需要了解的Python科学包、正则表达式、Solr检索 Section 1Section 2Section 11 Part2介绍NLP相关的各个知识点 Section3~5词法分析 层面的一些技术，是NLP技术的基础 Section6句法分析 技术 Section7常用的 向量化 方法，常用于各种NLP任务的输入 Section8情感分析 相关概念、场景以及一般做情感分析的流程 Section9机器学习 的一些基本概念，重点突出NLP常用的 分类算法 、聚类算法 Section10介绍NLP中常用的 深度学习算法","categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"http://yoursite.com/tags/NLP/"}]},{"title":"AHU HPC培训","slug":"AHU HPC培训","date":"2019-03-25T09:00:10.000Z","updated":"2019-03-28T08:44:23.873Z","comments":true,"path":"2019/03/25/AHU HPC培训/","link":"","permalink":"http://yoursite.com/2019/03/25/AHU HPC培训/","excerpt":"","text":"介绍 域名hpcc.ahu.edu.cn 配置情况 CPU 26 * gpu1 1 * gpu2 1 2卡 gpu8 3 8卡 Linux下操作命令 登录到结点 ssh [gpu01] 登陆后查看 top free 查看历史命令 .bash_history 环境变量 .bashrc .bash_profile 常用环境变量 设置可执行程序的查找路径 export PATH=/:$PATH e.g. export PATH=/Share/apps/matlab//R2016a/bin:$PATH # 直接在窗口输入时只在当前窗口有效 # 可以写入到 ~/.bashrc文件中 # 或写入到自定义.sh文件中，然后通过source加载 slurm作业管理器 sinfo查看当前各节点资源 timelimit 时间限制 State 状态 mix 有人用但是没有满 alloc 被占满 idle 空闲 squeue查看任务队列 -u 账号名 srun交互式提交 -p 节点名 -N 节点数 -n 核心数 -c 指定每个进程使用的cpu核数 -gres=gpu:1 指定使用GPU卡 ※必须 程序命令 sbatch后台提交作业 shell脚本 固定格式#!/bin/bash 参数同srun 默认输出 slurm-作业号.out文件 scancel取消作业 参数：作业号 -u 用户名 -n 作业名NAME scontrol show job查看正在运行的作业信息 参数：作业号 sacct查看历史任务信息 -u 用户名 salloc申请结点资源 Q&amp;A 安大集群软件 /Share/apps 常见问题 节点、核数不匹配 缺库 .so.x 提交AI作业 容器Singularity 主程序路径 /Share/apps/singularity/bin/singularity 镜像文件 /Share/imgs/ahu_ai.img GPU型号 V100,显存16G，共28张卡 实例 PyTorch脚本 #SBATCH –job-name=pytorch 作业名称 #SBATCH -N 1 节点数 #SBATCH –gres=gpu:1 GPU卡数 :star: #SBATCH -mem=20G 内存大小 #SBATCH -p GPU8 队列名（分区） 查看GPU使用情况 nvidia-smi Tensorflow使用 安装位置 /usr/local/lib/python3.6/dist-packages/tensorlfow 脚本 类似PyTorch 安装软件 ./install configure -&gt; make -&gt; make install cmake -&gt; ccmake -&gt; make –&gt; make install pip install 容器安装 没有root权限但是有安装常用软件的权限 :star:","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-25T08:41:51.318Z","updated":"2019-03-25T08:41:51.318Z","comments":true,"path":"2019/03/25/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}